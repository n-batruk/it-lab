const API_URL = 'http://localhost:5000/api';
let currentSortOrder = 'desc';
let currentFilter = 'all';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
window.addEventListener('load', () => {
    const token = localStorage.getItem('token');
    const username = localStorage.getItem('username');
    
    if (!token || !username) {
        window.location.href = 'login.html';
        return;
    }
    
    document.getElementById('usernameDisplay').textContent = username;
    loadFiles();
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤
async function loadFiles() {
    const token = localStorage.getItem('token');
    
    try {
        const response = await fetch(`${API_URL}/files?sort_by=created_at&sort_order=${currentSortOrder}&filter=${currentFilter}`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            displayFiles(data.files);
        } else {
            showMessage('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤', 'danger');
        }
    } catch (error) {
        showMessage('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', 'danger');
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ñ–∞–π–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ
function displayFiles(files) {
    const tbody = document.getElementById('filesTable');
    
    if (files.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤</td></tr>';
        return;
    }
    
    tbody.innerHTML = files.map(file => `
        <tr>
            <td>
                <a href="/* –ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* –¢–∞–±–ª–∏—Ü—è —Ñ–∞–π–ª—ñ–≤ */
.table-hover tbody tr:hover {
    cursor: pointer;
    background-color: #f8f9fa;
}

.table td, .table th {
    vertical-align: middle;
}

/* –û–±–ª–∞—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—É */
#previewArea {
    min-height: 300px;
    max-height: 600px;
    overflow-y: auto;" onclick="previewFile(${file.id}); return false;">
                    ${file.file_extension === '.c' ? 'üìÑ' : 'üñºÔ∏è'} ${file.filename}
                </a>
            </td>
            <td class="col-created">${formatDate(file.created_at)}</td>
            <td class="col-modified">${formatDate(file.modified_at)}</td>
            <td class="col-uploader">${file.uploaded_by || '-'}</td>
            <td class="col-editor">${file.edited_by || '-'}</td>
            <td>
                <button class="btn btn-sm btn-primary" onclick="downloadFile(${file.id}, '${file.filename}')">‚¨áÔ∏è</button>
                <button class="btn btn-sm btn-danger" onclick="deleteFile(${file.id})">üóëÔ∏è</button>
            </td>
        </tr>
    `).join('');
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    return date.toLocaleString('uk-UA');
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function uploadFile() {
    const fileInput = document.getElementById('fileInput');
    const file = fileInput.files[0];
    
    if (!file) {
        showMessage('–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª', 'warning');
        return;
    }
    
    const formData = new FormData();
    formData.append('file', file);
    
    const token = localStorage.getItem('token');
    
    try {
        const response = await fetch(`${API_URL}/upload`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            showMessage('–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ', 'success');
            fileInput.value = '';
            loadFiles();
        } else {
            showMessage(data.message, 'danger');
        }
    } catch (error) {
        showMessage('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É', 'danger');
    }
}

// –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ–∞–π–ª
async function previewFile(fileId) {
    const token = localStorage.getItem('token');
    const previewArea = document.getElementById('previewArea');
    
    previewArea.innerHTML = '<div class="spinner-border" role="status"></div>';
    
    try {
        const response = await fetch(`${API_URL}/preview/${fileId}`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            if (data.type === 'text') {
                previewArea.innerHTML = `<pre class="text-start" style="max-height: 500px; overflow-y: auto; font-size: 12px;">${escapeHtml(data.content)}</pre>`;
            } else if (data.type === 'image') {
                previewArea.innerHTML = `<img src="data:image/jpeg;base64,${data.content}" class="img-fluid" alt="Preview">`;
            }
        } else {
            previewArea.innerHTML = `<p class="text-danger">${data.message}</p>`;
        }
    } catch (error) {
        previewArea.innerHTML = '<p class="text-danger">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</p>';
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª
async function downloadFile(fileId, filename) {
    const token = localStorage.getItem('token');
    
    try {
        const response = await fetch(`${API_URL}/download/${fileId}`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            window.URL.revokeObjectURL(url);
        } else {
            showMessage('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É', 'danger');
        }
    } catch (error) {
        showMessage('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É', 'danger');
    }
}

// –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª
async function deleteFile(fileId) {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ñ–∞–π–ª?')) {
        return;
    }
    
    const token = localStorage.getItem('token');
    
    try {
        const response = await fetch(`${API_URL}/delete/${fileId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            showMessage('–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
            loadFiles();
        } else {
            showMessage(data.message, 'danger');
        }
    } catch (error) {
        showMessage('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É', 'danger');
    }
}

// –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (–í–∞—Ä—ñ–∞–Ω—Ç 1 - –ø–æ –¥–∞—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)
function sortFiles(order) {
    currentSortOrder = order;
    loadFiles();
}

// –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è (–í–∞—Ä—ñ–∞–Ω—Ç 7 - .c, .jpg)
function filterFiles() {
    currentFilter = document.getElementById('filterSelect').value;
    loadFiles();
}

// –ü–æ–∫–∞–∑–∞—Ç–∏/—Å—Ö–æ–≤–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏
function toggleColumns() {
    const showCreated = document.getElementById('showCreated').checked;
    const showModified = document.getElementById('showModified').checked;
    const showUploader = document.getElementById('showUploader').checked;
    const showEditor = document.getElementById('showEditor').checked;
    
    document.querySelectorAll('.col-created').forEach(el => {
        el.style.display = showCreated ? '' : 'none';
    });
    
    document.querySelectorAll('.col-modified').forEach(el => {
        el.style.display = showModified ? '' : 'none';
    });
    
    document.querySelectorAll('.col-uploader').forEach(el => {
        el.style.display = showUploader ? '' : 'none';
    });
    
    document.querySelectorAll('.col-editor').forEach(el => {
        el.style.display = showEditor ? '' : 'none';
    });
}

// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–∞–ø–∫–∏ (–≤–∏–∫–ª–∏–∫–∞—î Python —Ñ—É–Ω–∫—Ü—ñ—é —á–µ—Ä–µ–∑ Eel)
function syncFolder() {
    if (typeof eel !== 'undefined') {
        eel.select_and_sync_folder()();
    } else {
        showMessage('–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –¥–µ—Å–∫—Ç–æ–ø-–≤–µ—Ä—Å—ñ—ó', 'info');
    }
}

// –í–∏—Ö—ñ–¥
function logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('username');
    localStorage.removeItem('user_id');
    window.location.href = 'login.html';
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function showMessage(message, type) {
    const messageArea = document.getElementById('messageArea');
    messageArea.innerHTML = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    setTimeout(() => {
        messageArea.innerHTML = '';
    }, 5000);
}

// Escape HTML
function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}

// === –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –ü–ê–ü–ö–ò (—Ç—ñ–ª—å–∫–∏ –¥–ª—è Desktop –≤–µ—Ä—Å—ñ—ó) ===
async function syncFolder() {
    try {
        console.log("üîÑ –í–∏–∫–ª–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–∞–ø–∫–∏...");

        if (typeof eel === 'undefined') {
            alert("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ —É –¥–µ—Å–∫—Ç–æ–ø-–¥–æ–¥–∞—Ç–∫—É.");
            return;
        }

        // –ó—á–∏—Ç—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ localStorage (–¥–µ –≤—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É)
        const token = localStorage.getItem('token');
        if (!token) {
            alert("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!");
            return;
        }

        // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω —É Python
        const result = await eel.select_and_sync_folder(token)();

        console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", result);
        alert(result.message || "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:", error);
        alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–∞–ø–∫–∏.");
    }
}
